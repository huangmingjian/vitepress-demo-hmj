import{_ as e,c as i,o as a,ae as n}from"./chunks/framework.CEJdHl6x.js";const t="/vitepress-demo-hmj/assets/code.B7QOiwc-.jpg",p="/vitepress-demo-hmj/assets/home.uNxtaJpw.jpg",l="/vitepress-demo-hmj/assets/home-order._iECO6LN.jpg",o="/vitepress-demo-hmj/assets/imghome.Ce40XcOl.jpg",h="/vitepress-demo-hmj/assets/pagetitle.Bn1YxBBb.jpg",r="/vitepress-demo-hmj/assets/body.C0xbmS0P.jpg",d="/vitepress-demo-hmj/assets/component.Dr_OiLmC.jpg",_=JSON.parse('{"title":"前言","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"linklocation/learn-vitepress.md","filePath":"linklocation/learn-vitepress.md"}'),c={name:"linklocation/learn-vitepress.md"};function k(m,s,E,g,u,v){return a(),i("div",null,s[0]||(s[0]=[n(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>在公司发布的培养计划中发现了 <code>vitepress</code>,在官网做了个简单了解，<code>VitePress</code> 是一个静态站点生成器，专为构建快速、以内容为中心的站点而设计。为了学习 <code>VitePress</code>，我决定自己搭建一个站点，作为学习笔记。</p><p>在下面文章中，将带你从0到1用<code>VitePress</code>搭建一个站点，从初始化到项目部署。一起来看看，后续有什么建议可以联系我(<a href="mailto:1401937586@qq.com" target="_blank" rel="noreferrer">1401937586@qq.com</a>)。</p><h2 id="一-项目开始" tabindex="-1">一.项目开始 <a class="header-anchor" href="#一-项目开始" aria-label="Permalink to &quot;一.项目开始&quot;">​</a></h2><h3 id="_1-1、创建目录" tabindex="-1">1.1、创建目录 <a class="header-anchor" href="#_1-1、创建目录" aria-label="Permalink to &quot;1.1、创建目录&quot;">​</a></h3><p>在桌面创建一个文件名,这里创建mydocu目录，并进入目录。然后使用你喜欢的包管理工具进行初始化。这里我用pnpm,如下代码所示:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 如果没有安装过pnpm，可以全局安装下</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sudo npm install -g pnpm</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 用pnpm初始化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm init</span></span></code></pre></div><p>项目初始化完成后,使用pnpm将vitepress安装为本地依赖:如下代码所示:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 安装命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm add vitepress -D</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 如果使用pnpm初始化的话，需要在package.json加上一下代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;pnpm&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &quot;peerDependencyRules&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &quot;ignoreMissing&quot;: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &quot;@algolia/client-search&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_1-2、创建项目" tabindex="-1">1.2、创建项目 <a class="header-anchor" href="#_1-2、创建项目" aria-label="Permalink to &quot;1.2、创建项目&quot;">​</a></h3><p>在vitepress官方文档中提到，vitepress附带了一个命令行向导，来帮助我们构建一个基本的项目。通过以下命令来执行该操作:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm exec vitepress init</span></span></code></pre></div><p>构建完成如下图所示: <img src="`+t+`" style="zoom:50%;"> 此时文件的目录结构是这样的，日下树状代码所示:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─ docs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ├─ .vitepress</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  │  └─ config.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ├─ api-examples.md</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ├─ markdown-examples.md</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  └─ index.md 入口文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└─ package.json</span></span></code></pre></div><p>到这里，我们就基本完成了vitepress项目的初始化。最后，我们运行 pnpm run docs:dev 来打开项目。效果如下: <img src="`+p+'" style="zoom:50%;"> 这里页面展示稍微有些不同,我是美化了一下,后面我们会学习如何配置。</p><h2 id="二-配置美化" tabindex="-1">二.配置美化 <a class="header-anchor" href="#二-配置美化" aria-label="Permalink to &quot;二.配置美化&quot;">​</a></h2><p>基础框架我们已经搭建完成,接下来我们需要对博客进行进一步美化。</p><p>2.1、整体布局 对于vitepress来说，刚进去的那一刻，映入眼帘的就是首页，也就是docs/index.md这个文件。首页主要由以下五个部分组成：</p><img src="'+l+'" style="zoom:50%;"><p>1.导航栏:官网学习 <a href="https://vitepress.dev/zh/reference/default-theme-nav#nav,%E5%85%B7%E4%BD%93%E9%85%8D%E7%BD%AE%E6%9F%A5%E7%9C%8B%E5%90%8E%E7%BB%AD%E3%80%82" target="_blank" rel="noreferrer">https://vitepress.dev/zh/reference/default-theme-nav#nav,具体配置查看后续。</a></p><p>2.主体内容: index.md文件。 <img src="'+o+'" style="zoom:50%;"></p><p>3.内容主体:index.md文件配置hero,image配置右边头像,actions配置活动按钮。 <img src="'+h+'" style="zoom:50%;"></p><p>4.内容展示框:index.md文件配置features内容。 <img src="'+r+'" style="zoom:50%;"></p><p>5.自定义内容: 可以自己编写vue组件，然后引入到index.md中进行展示。 <img src="'+d+'" style="zoom:50%;"></p>',24)]))}const y=e(c,[["render",k]]);export{_ as __pageData,y as default};
